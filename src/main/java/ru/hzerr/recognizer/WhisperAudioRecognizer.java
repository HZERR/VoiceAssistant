package ru.hzerr.recognizer;

import jakarta.annotation.PostConstruct;
import org.apache.hc.client5.http.classic.methods.HttpPost;
import org.apache.hc.client5.http.classic.methods.HttpGet;
import org.apache.hc.client5.http.entity.mime.HttpMultipartMode;
import org.apache.hc.client5.http.entity.mime.MultipartEntityBuilder;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.http.ClassicHttpResponse;
import org.apache.hc.core5.http.ContentType;
import org.apache.hc.core5.http.io.entity.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ru.hzerr.configuration.ReadOnlyApplicationConfiguration;
import ru.hzerr.utils.JsonUtils;

import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

@Component
public class WhisperAudioRecognizer implements IRecognizer {

    private static final Logger log = LoggerFactory.getLogger(WhisperAudioRecognizer.class);
    private static final String LOCAL_SERVER_URL = "http://localhost:8080";
    private static final String LOCAL_HEALTH_URL = "%s/health".formatted(LOCAL_SERVER_URL);
    private final CloseableHttpClient httpClient;

    @Autowired
    public WhisperAudioRecognizer(ReadOnlyApplicationConfiguration applicationConfiguration) {
        this.httpClient = HttpClients.custom().build();
    }

    @PostConstruct
    private void init() {
        log.debug("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...");

        try {
            try (ClassicHttpResponse response = httpClient.execute(new HttpGet(LOCAL_HEALTH_URL))) {
                int status = response.getCode();
                if (status == 200) {
                    log.debug("‚úÖ Whisper —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω");
                } else {
                    throw new IllegalStateException("Whisper Server –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: " + status);
                }
            }
        } catch (Exception e) {
            throw new IllegalStateException("Whisper —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: " + LOCAL_SERVER_URL, e);
        }
    }

    // whisper-server.exe --model ggml-small.bin --port 8080 --language ru --threads 8 --flash-attn
    // whisper-server.exe --model ggml-medium-q8_0.bin --port 8080 --language ru --threads 8 --flash-attn
    // whisper-server.exe --model ggml-medium-q8_0.bin --port 8080 --threads 4 --language ru --max-len 1 --flash-attn
    @Override
    public String recognize(byte[] audioData) {
        long startTime = System.currentTimeMillis();
        log.debug("üß† –û—Ç–ø—Ä–∞–≤–∫–∞ {} –±–∞–π—Ç –∞—É–¥–∏–æ –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...", audioData.length);

        HttpPost post = new HttpPost(LOCAL_SERVER_URL + "/inference");

        // –°–æ–∑–¥–∞–µ–º multipart —Å –ø–æ–ª–µ–º "file", –ø–µ—Ä–µ–¥–∞—ë–º –±–∞–π—Ç—ã –∏–∑ –ø–∞–º—è—Ç–∏
        MultipartEntityBuilder builder = MultipartEntityBuilder.create();
        builder.setMode(HttpMultipartMode.STRICT);
        try {
            builder.addBinaryBody(
                    "file",
                    new ByteArrayInputStream(convertPcmToWav(audioData, 16000, 16, 1)),
                    ContentType.create("audio/wav"),
                    "audio.wav"
            );
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        post.setEntity(builder.build());

        try (CloseableHttpResponse response = httpClient.execute(post)) {
            int status = response.getCode();
            String responseBody = EntityUtils.toString(response.getEntity());

            if (status == 200) {
                log.debug("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {}ms: {}", System.currentTimeMillis() - startTime, responseBody);
                return JsonUtils.read(responseBody).path("text").asText();
            } else {
                throw new IOException("HTTP –æ—à–∏–±–∫–∞: " + status + ", —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: " + responseBody);
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Whisper Server", e);
            throw new IllegalStateException("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∞—É–¥–∏–æ");
        }
    }

    public static byte[] convertPcmToWav(byte[] pcmData, int sampleRate, int bitsPerSample, int channels) throws IOException {
        AudioFormat format = new AudioFormat(sampleRate, bitsPerSample, channels, true, false);

        try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {
            try (AudioInputStream audioInputStream = new AudioInputStream(new ByteArrayInputStream(pcmData), format, pcmData.length / format.getFrameSize())) {
                AudioSystem.write(audioInputStream, AudioFileFormat.Type.WAVE, out);
                return out.toByteArray();
            }
        }
    }
}
