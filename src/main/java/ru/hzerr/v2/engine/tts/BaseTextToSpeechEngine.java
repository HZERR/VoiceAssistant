package ru.hzerr.v2.engine.tts;

import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ru.hzerr.v2.exception.ProcessingException;

import java.net.http.HttpClient;

public abstract class BaseTextToSpeechEngine implements ITextToSpeechEngine {

    private static final Logger log = LoggerFactory.getLogger(BaseTextToSpeechEngine.class);
    protected final HttpClient httpClient;

    protected BaseTextToSpeechEngine() {
        this.httpClient = HttpClient.newHttpClient();
    }
    protected BaseTextToSpeechEngine(HttpClient httpClient) {
        this.httpClient = httpClient;
    }

    @PostConstruct
    private void initialize() throws Exception {
        log.debug("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏...");
        long startTime = System.currentTimeMillis();
        onInitialize();
        log.debug("‚úÖ –ú–æ–¥—É–ª—å —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ '{}' –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ {}ms", getModuleName(), System.currentTimeMillis() - startTime);
    }

    @Override
    public byte[] synthesize(String input) throws ProcessingException {
        log.debug("üß† –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –Ω–∞—á–∞—Ç (–¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {})...", input.length());
        long startTime = System.currentTimeMillis();
        try {
            return onSynthesize(input);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ —Ä–µ—á–∏", e);
            throw new ProcessingException(e.getMessage(), e);
        } finally {
            log.debug("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {}ms", System.currentTimeMillis() - startTime);
        }
    }

    @PreDestroy
    private void destroy() throws Exception {
        log.debug("üì¶ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏...");
        long startTime = System.currentTimeMillis();
        onDestroy();
        httpClient.close();
        log.debug("‚úÖ –ú–æ–¥—É–ª—å —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ '{}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {}ms", getModuleName(), System.currentTimeMillis() - startTime);
    }

    protected abstract String getModuleName();
    protected abstract void onInitialize() throws Exception;
    protected abstract byte[] onSynthesize(String input) throws Exception;
    protected abstract void onDestroy() throws Exception;
}
